@import '../config/colors';
@import '../mixins/keyframe-glitch';
@import '../mixins/typography';

.glitch-text {
    font-family: $font-logo;
    font-size: 8rem;
    font-weight: 900;
    line-height: 1;
    position: relative;
    text-align: center;
    text-transform: uppercase;

    &__inner {
        animation: glitch-skew 4s cubic-bezier(.25, .46, .45, .94) 4s infinite;
        line-height: 1;
        position: relative;
    }
    &__main {
        color: #FFF;
        transform-origin: center top;
        z-index: 2;
    }

    &__color {
        animation-duration: 300ms;
        animation-iteration-count: infinite;
        animation-name: glitch-idle;
        animation-timing-function: cubic-bezier(.25, .46, .45, .94);
        height: 100%;
        left: 0;
        opacity: 0.8;
        position: absolute;
        top: 0;
        transform-origin: center center;
        width: 100%;
        z-index: -1;

        &--first {
            color: $c-red;
        }

        &--second {
            animation-direction: reverse;
            color: $c-blue;
        }

        &--third {
            animation-delay: 100ms;
            color: $c-green;
        }
    }

    &__line {
        animation: glitch-line 2s linear infinite;
        background: $c-black;
        content: '';
        height: 1px;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
        z-index: 1;

        &--first {
            animation: glitch-line 2s linear infinite;
        }

        &--second {
            animation: glitch-line 1s linear 1s infinite;
        }
    }
    @for $i from 1 through 20 {
        &--level#{$i} {
            .glitch-text__color {
                animation-name: glitch-level#{$i};
            }
        }
    }

}

@for $i from 1 through 20 {
    $amount: (8 + (($i - 1) * 4)) * 1px;
    $negAmount: (-1 * (8 + (($i - 1) * 4))) * 1px;
    @keyframes glitch-level#{$i} {
        0% {
            transform: translate(0);
        }
        20% {
            transform: translate($negAmount, $amount);
        }
        40% {
            transform: translate($negAmount, $negAmount);
        }
        60% {
            transform: translate($amount, $amount);
        }
        80% {
            transform: translate($amount, $negAmount);
        }
        100% {
            transform: translate(0);
        }
    }
}

@keyframes glitch-idle {
    0% {
        transform: translate(0);
    }
    20% {
        transform: translate(-8px, 8px);
    }
    40% {
        transform: translate(-8px, -8px);
    }
    60% {
        transform: translate(8px, 8px);
    }
    80% {
        transform: translate(8px, -8px);
    }
    100% {
        transform: translate(0);
    }
}

@keyframes glitch-test {
    0% {
        transform: translate(0);
    }
    20% {
        transform: translate(-40px, 40px);
    }
    40% {
        transform: translate(-40px, -40px);
    }
    60% {
        transform: translate(40px, 40px);
    }
    80% {
        transform: translate(40px, -40px);
    }
    100% {
        transform: translate(0);
    }
}

@keyframes glitch-skew {
    0% {
        transform: skew(0deg, 0deg);
    }
    48% {
        transform: skew(0deg, 0deg);
        filter: blur(0);
    }
    50% {
        transform: skew(-20deg, 0deg);
        filter: blur(4px);
    }
    52% {
        transform: skew(20deg, 0deg);
    }
    54% {
        transform: skew(0deg, 0deg);
        filter: blur(0);
    }
    100% {
        transform: skew(0deg, 0deg);
    }

}

@keyframes glitch-line {
    0% {
        top: 0;
    }

    100% {
        top: 100%;
    }

}

@keyframes glitch-grow {
    0% {
        transform: scale(0);
    }
    100% {
        transform: scale(10);
    }
}
